{"version":3,"sources":["pages/uiComponentsPages/UIComponentsPage.styles.ts","components/common/Collapse/Collapse.styles.ts","components/common/Collapse/Collapse.tsx","components/common/Skeleton/Skeleton.styles.ts","components/common/Skeleton/Skeleton.tsx","pages/uiComponentsPages/feedback/SkeletonsPage.tsx"],"names":["Card","styled","CommonCard","InputsWrapper","div","CollapseWrapper","Collapse","AntdCollapse","Panel","props","Skeleton","AntSkeleton","SkeletonButton","AntdSkeleton","Button","SkeletonInput","Input","SkeletonAvatar","Avatar","SkeletonImage","Image","FormItem","Form","Item","media","xs","md","SkeletonsPage","t","useTranslation","useState","active","block","size","state","setState","handleShapeChange","prop","e","target","value","PageTitle","title","avatar","paragraph","rows","wrap","shape","buttonShape","avatarShape","style","width","layout","label","Switch","checked","onChange","Group"],"mappings":"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","file":"static/js/31.1f7c7d06.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Card as CommonCard } from 'components/common/Card/Card';\nimport { Collapse } from 'components/common/Collapse/Collapse';\n\nexport const Card = styled(CommonCard)`\n  width: 100%;\n  margin-bottom: 1.25rem;\n  .ant-card-head-title {\n    font-size: 1rem;\n  }\n  .ant-card-body {\n    display: flex;\n    flex\n    flex-wrap: wrap;\n    gap: 1.25rem;\n    align-items: center;\n  }\n  .ant-card-body:before {\n    display: none;\n  }\n  .ant-card-body:after {\n    display: none;\n  }\n  &.ant-card-bordered {\n    border: 1px solid var(--border-color);\n  }\n`;\n\nexport const InputsWrapper = styled.div`\n  width: 30rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1.25rem;\n`;\n\nexport const CollapseWrapper = styled(Collapse)`\n  width: 40rem;\n`;\n","import styled from 'styled-components';\nimport { Collapse as AntdCollapse } from 'antd';\n\nexport const Collapse = styled(AntdCollapse)``;\n","import { CollapseProps, Collapse as AntdCollapse } from 'antd';\nimport * as S from './Collapse.styles';\n\nexport const { Panel } = AntdCollapse;\n\nexport const Collapse: React.FC<CollapseProps> = (props) => {\n  return <S.Collapse {...props} />;\n};\n","import styled from 'styled-components';\nimport { Skeleton as AntSkeleton } from 'antd';\n\nexport const Skeleton = styled(AntSkeleton)``;\n","import React from 'react';\nimport { Skeleton as AntdSkeleton, SkeletonProps } from 'antd';\nimport * as S from './Skeleton.styles';\n\nexport const {\n  Button: SkeletonButton,\n  Input: SkeletonInput,\n  Avatar: SkeletonAvatar,\n  Image: SkeletonImage,\n} = AntdSkeleton;\n\nexport const Skeleton: React.FC<SkeletonProps> = (props) => {\n  return <S.Skeleton {...props} />;\n};\n","import React, { useState } from 'react';\nimport { Col, Space, Divider, Form, Radio, RadioChangeEvent } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport {\n  Skeleton,\n  SkeletonButton,\n  SkeletonInput,\n  SkeletonAvatar,\n  SkeletonImage,\n} from '@app/components/common/Skeleton/Skeleton';\nimport { PageTitle } from '@app/components/common/PageTitle/PageTitle';\nimport * as S from '@app/pages/uiComponentsPages//UIComponentsPage.styles';\nimport { media } from '@app/styles/themes/constants';\nimport { Switch } from '@app/components/common/Switch/Switch';\n\nconst FormItem = styled(Form.Item)`\n  @media only screen and ${media.xs} {\n    max-width: fit-content;\n  }\n\n  @media only screen and ${media.md} {\n    max-width: 100%;\n  }\n`;\n\nconst SkeletonsPage: React.FC = () => {\n  const { t } = useTranslation();\n  const [state, setState] = useState<{\n    active: boolean;\n    block: boolean;\n    size?: 'default' | 'large' | 'small';\n    buttonShape?: 'circle' | 'square' | 'round';\n    avatarShape?: 'circle' | 'square';\n  }>({\n    active: false,\n    block: false,\n    size: 'default',\n  });\n\n  const handleActiveChange = (checked: boolean) => {\n    setState({ ...state, active: checked });\n  };\n\n  const handleBlockChange = (checked: boolean) => {\n    setState({ ...state, block: checked });\n  };\n\n  const handleSizeChange = (e: RadioChangeEvent) => {\n    setState({ ...state, size: e.target.value });\n  };\n\n  const handleShapeChange = (prop: string) => (e: RadioChangeEvent) => {\n    setState({ ...state, [prop]: e.target.value });\n  };\n\n  return (\n    <>\n      <PageTitle>{t('common.skeleton')}</PageTitle>\n      <Col>\n        <S.Card title={t('skeletons.basic')}>\n          <Skeleton />\n        </S.Card>\n        <S.Card title={t('skeletons.complex')}>\n          <Skeleton avatar paragraph={{ rows: 4 }} />\n        </S.Card>\n        <S.Card title={t('skeletons.active')}>\n          <Skeleton active />\n        </S.Card>\n        <S.Card title={t('skeletons.customization')}>\n          <div>\n            <Space wrap>\n              <SkeletonButton active={state.active} size={state.size} shape={state.buttonShape} block={state.block} />\n              <SkeletonAvatar active={state.active} size={state.size} shape={state.avatarShape} />\n              <SkeletonInput style={{ width: 200 }} active={state.active} size={state.size} />\n            </Space>\n            <br />\n            <br />\n            <SkeletonButton active={state.active} size={state.size} shape={state.buttonShape} block={state.block} />\n            <br />\n            <br />\n            <SkeletonImage />\n            <Divider />\n            <Form layout=\"inline\">\n              <FormItem label={t('skeletons.activeLabel')}>\n                <Switch checked={state.active} onChange={handleActiveChange} />\n              </FormItem>\n              <FormItem label={t('skeletons.buttonBlock')}>\n                <Switch checked={state.block} onChange={handleBlockChange} />\n              </FormItem>\n              <FormItem label={t('skeletons.size')}>\n                <Radio.Group value={state.size} onChange={handleSizeChange}>\n                  <Radio.Button value=\"default\">{t('skeletons.default')}</Radio.Button>\n                  <Radio.Button value=\"large\">{t('skeletons.large')}</Radio.Button>\n                  <Radio.Button value=\"small\">{t('skeletons.small')}</Radio.Button>\n                </Radio.Group>\n              </FormItem>\n              <FormItem label={t('skeletons.buttonShape')}>\n                <Radio.Group value={state.buttonShape} onChange={handleShapeChange('buttonShape')}>\n                  <Radio.Button value=\"default\">{t('skeletons.default')}</Radio.Button>\n                  <Radio.Button value=\"round\">{t('skeletons.round')}</Radio.Button>\n                  <Radio.Button value=\"circle\">{t('skeletons.circle')}</Radio.Button>\n                </Radio.Group>\n              </FormItem>\n              <FormItem label={t('skeletons.avatarShape')}>\n                <Radio.Group value={state.avatarShape} onChange={handleShapeChange('avatarShape')}>\n                  <Radio.Button value=\"square\">{t('skeletons.square')}</Radio.Button>\n                  <Radio.Button value=\"circle\">{t('skeletons.circle')}</Radio.Button>\n                </Radio.Group>\n              </FormItem>\n            </Form>\n          </div>\n        </S.Card>\n      </Col>\n    </>\n  );\n};\n\nexport default SkeletonsPage;\n"],"sourceRoot":""}
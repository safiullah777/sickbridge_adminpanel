{"version":3,"sources":["pages/uiComponentsPages/UIComponentsPage.styles.ts","components/common/Collapse/Collapse.styles.ts","components/common/Collapse/Collapse.tsx","../node_modules/antd/es/auto-complete/index.js","components/common/AutoComplete/AutoComplete.styles.ts","components/common/AutoComplete/AutoComplete.tsx","pages/uiComponentsPages/forms/AutoCompletesPage.tsx"],"names":["Card","styled","CommonCard","InputsWrapper","div","CollapseWrapper","Collapse","AntdCollapse","Panel","props","Option","Select","isSelectOptionOrSelectOptGroup","child","type","isSelectOption","isSelectOptGroup","AutoComplete","ref","customizeInput","customizePrefixCls","prefixCls","className","popupClassName","dropdownClassName","children","dataSource","childNodes","toArray","length","isValidElement","_childNodes","_slicedToArray","optionChildren","getInputElement","undefined","map","item","_typeof","React","key","value","optionValue","text","ConfigConsumer","_ref","getPrefixCls","_extends","omit","classNames","concat","mode","SECRET_COMBOBOX_MODE_DO_NOT_USE","RefAutoComplete","AntAutoComplete","Link","a","CategoryWrapper","SearchInput","CommonSearchInput","mockVal","str","repeat","AutoCompletesPage","t","useTranslation","useState","options","setOptions","result","setResult","renderTitle","title","href","target","rel","renderItem","count","label","UserOutlined","categories","PageTitle","style","width","onSearch","searchText","placeholder","res","indexOf","domain","email","prefix"],"mappings":"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","file":"static/js/32.87e65c76.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Card as CommonCard } from 'components/common/Card/Card';\nimport { Collapse } from 'components/common/Collapse/Collapse';\n\nexport const Card = styled(CommonCard)`\n  width: 100%;\n  margin-bottom: 1.25rem;\n  .ant-card-head-title {\n    font-size: 1rem;\n  }\n  .ant-card-body {\n    display: flex;\n    flex\n    flex-wrap: wrap;\n    gap: 1.25rem;\n    align-items: center;\n  }\n  .ant-card-body:before {\n    display: none;\n  }\n  .ant-card-body:after {\n    display: none;\n  }\n  &.ant-card-bordered {\n    border: 1px solid var(--border-color);\n  }\n`;\n\nexport const InputsWrapper = styled.div`\n  width: 30rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1.25rem;\n`;\n\nexport const CollapseWrapper = styled(Collapse)`\n  width: 40rem;\n`;\n","import styled from 'styled-components';\nimport { Collapse as AntdCollapse } from 'antd';\n\nexport const Collapse = styled(AntdCollapse)``;\n","import { CollapseProps, Collapse as AntdCollapse } from 'antd';\nimport * as S from './Collapse.styles';\n\nexport const { Panel } = AntdCollapse;\n\nexport const Collapse: React.FC<CollapseProps> = (props) => {\n  return <S.Collapse {...props} />;\n};\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n/**\n * TODO: 4.0\n *\n * - Remove `dataSource`\n * - `size` not work with customizeInput\n * - CustomizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { ConfigConsumer } from '../config-provider';\nimport Select from '../select';\nimport { isValidElement } from '../_util/reactNode';\nimport warning from '../_util/warning';\nvar Option = Select.Option;\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\nvar AutoComplete = function AutoComplete(props, ref) {\n  var customizePrefixCls = props.prefixCls,\n    className = props.className,\n    popupClassName = props.popupClassName,\n    dropdownClassName = props.dropdownClassName,\n    children = props.children,\n    dataSource = props.dataSource;\n  var childNodes = toArray(children);\n  // ============================= Input =============================\n  var customizeInput;\n  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    var _childNodes = _slicedToArray(childNodes, 1);\n    customizeInput = _childNodes[0];\n  }\n  var getInputElement = customizeInput ? function () {\n    return customizeInput;\n  } : undefined;\n  // ============================ Options ============================\n  var optionChildren;\n  // [Legacy] convert `children` or `dataSource` into option children\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(function (item) {\n      if (isValidElement(item)) {\n        return item;\n      }\n      switch (_typeof(item)) {\n        case 'string':\n          return /*#__PURE__*/React.createElement(Option, {\n            key: item,\n            value: item\n          }, item);\n        case 'object':\n          {\n            var optionValue = item.value;\n            return /*#__PURE__*/React.createElement(Option, {\n              key: optionValue,\n              value: optionValue\n            }, item.text);\n          }\n        default:\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'AutoComplete', '`dataSource` is only supports type `string[] | Object[]`.') : void 0;\n          return undefined;\n      }\n    }) : [];\n  }\n  process.env.NODE_ENV !== \"production\" ? warning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.') : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!dropdownClassName, 'AutoComplete', '`dropdownClassName` is deprecated which will be removed in next major version. Please use `popupClassName` instead.') : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.') : void 0;\n  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {\n    var getPrefixCls = _ref.getPrefixCls;\n    var prefixCls = getPrefixCls('select', customizePrefixCls);\n    return /*#__PURE__*/React.createElement(Select, _extends({\n      ref: ref\n    }, omit(props, ['dataSource']), {\n      prefixCls: prefixCls,\n      popupClassName: popupClassName || dropdownClassName,\n      className: classNames(\"\".concat(prefixCls, \"-auto-complete\"), className),\n      mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE\n    }, {\n      // Internal api\n      getInputElement: getInputElement\n    }), optionChildren);\n  });\n};\nvar RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete);\nRefAutoComplete.Option = Option;\nexport default RefAutoComplete;","import styled from 'styled-components';\nimport { AutoComplete as AntAutoComplete } from 'antd';\n\nexport const AutoComplete = styled(AntAutoComplete)``;\n","import { ComponentProps } from 'react';\nimport { AutoComplete as AntAutoComplete } from 'antd';\nimport * as S from './AutoComplete.styles';\n\nexport const AutoComplete: React.FC<ComponentProps<typeof AntAutoComplete>> = (props) => {\n  return <S.AutoComplete {...props} />;\n};\n","import React, { useState } from 'react';\nimport { Col } from 'antd';\nimport { AutoComplete } from 'components/common/AutoComplete/AutoComplete';\nimport { SearchInput as CommonSearchInput } from 'components/common/inputs/SearchInput/SearchInput';\nimport { Option } from 'components/common/selects/Select/Select';\nimport { UserOutlined } from '@ant-design/icons';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport { PageTitle } from '@app/components/common/PageTitle/PageTitle';\nimport * as S from '@app/pages/uiComponentsPages//UIComponentsPage.styles';\n\nconst Link = styled.a`\n  float: right;\n`;\n\nconst CategoryWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst SearchInput = styled(CommonSearchInput)`\n  .ant-input-search-button {\n    height: 3.1rem;\n  }\n`;\n\nconst mockVal = (str: string, repeat = 1) => ({\n  value: str.repeat(repeat),\n});\n\nconst AutoCompletesPage: React.FC = () => {\n  const { t } = useTranslation();\n  const [options, setOptions] = useState<{ value: string }[]>([]);\n  const [result, setResult] = useState<string[]>([]);\n\n  const handleCustomSearch = (value: string) => {\n    let res: string[];\n    if (!value || value.indexOf('@') >= 0) {\n      res = [];\n    } else {\n      res = ['gmail.com', '163.com', 'qq.com'].map((domain) => `${value}@${domain}`);\n    }\n    setResult(res);\n  };\n\n  const handleSearch = (searchText: string) => {\n    setOptions(!searchText ? [] : [mockVal(searchText), mockVal(searchText, 2), mockVal(searchText, 3)]);\n  };\n\n  const renderTitle = (title: string) => (\n    <span>\n      {title}\n      <Link href=\"https://www.google.com/search?q=antd\" target=\"_blank\" rel=\"noopener noreferrer\">\n        more\n      </Link>\n    </span>\n  );\n\n  const renderItem = (title: string, count: number) => ({\n    value: title,\n    label: (\n      <CategoryWrapper>\n        {title}\n        <span>\n          <UserOutlined /> {count}\n        </span>\n      </CategoryWrapper>\n    ),\n  });\n\n  const categories = [\n    {\n      label: renderTitle(t('autoCompletes.libraries')),\n      options: [renderItem(t('autoCompletes.antDesign'), 10000), renderItem(t('autoCompletes.antDesignUI'), 10600)],\n    },\n    {\n      label: renderTitle(t('autoCompletes.solutions')),\n      options: [\n        renderItem(t('autoCompletes.antDesignUIFaq'), 60100),\n        renderItem(t('autoCompletes.antDesignFaq'), 30010),\n      ],\n    },\n    {\n      label: renderTitle(t('autoCompletes.articles')),\n      options: [renderItem(t('autoCompletes.antDesignLanguage'), 100000)],\n    },\n  ];\n\n  return (\n    <>\n      <PageTitle>{t('common.autocomplete')}</PageTitle>\n      <Col>\n        <S.Card title={t('autoCompletes.basic')}>\n          <label>\n            <AutoComplete\n              options={options}\n              style={{ width: 200 }}\n              onSearch={handleSearch}\n              placeholder={t('autoCompletes.inputHere')}\n            />\n          </label>\n        </S.Card>\n        <S.Card title={t('autoCompletes.customOptions')}>\n          <label>\n            <AutoComplete\n              style={{ width: 200 }}\n              onSearch={handleCustomSearch}\n              placeholder={t('autoCompletes.inputHere')}\n            >\n              {result.map((email: string) => (\n                <Option key={email} value={email}>\n                  {email}\n                </Option>\n              ))}\n            </AutoComplete>\n          </label>\n        </S.Card>\n        <S.Card title={t('autoCompletes.categories')}>\n          <label>\n            <AutoComplete popupClassName=\"certain-category-search-dropdown\" options={categories}>\n              <SearchInput placeholder={t('autoCompletes.inputHere')} prefix={null} />\n            </AutoComplete>\n          </label>\n        </S.Card>\n      </Col>\n    </>\n  );\n};\n\nexport default AutoCompletesPage;\n"],"sourceRoot":""}
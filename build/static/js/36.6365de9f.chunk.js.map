{"version":3,"sources":["pages/uiComponentsPages/UIComponentsPage.styles.ts","components/common/Collapse/Collapse.styles.ts","components/common/Collapse/Collapse.tsx","pages/uiComponentsPages/modals/ModalsPage.tsx"],"names":["Card","styled","CommonCard","InputsWrapper","div","CollapseWrapper","Collapse","AntdCollapse","Panel","props","ModalsPage","t","useTranslation","useState","isBasicModalOpen","setIsBasicModalOpen","isSmallModalOpen","setIsSmallModalOpen","isMiddleModalOpen","setIsMiddleModalOpen","isLargeModalOpen","setIsLargeModalOpen","isFullscreenModalOpen","setIsFullscreenModalOpen","title","type","onClick","open","onOk","onCancel","centered","size","width","severity","SuccessModal","content","InfoModal","WarningModal","ErrorModal"],"mappings":"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","file":"static/js/36.6365de9f.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Card as CommonCard } from 'components/common/Card/Card';\nimport { Collapse } from 'components/common/Collapse/Collapse';\n\nexport const Card = styled(CommonCard)`\n  width: 100%;\n  margin-bottom: 1.25rem;\n  .ant-card-head-title {\n    font-size: 1rem;\n  }\n  .ant-card-body {\n    display: flex;\n    flex\n    flex-wrap: wrap;\n    gap: 1.25rem;\n    align-items: center;\n  }\n  .ant-card-body:before {\n    display: none;\n  }\n  .ant-card-body:after {\n    display: none;\n  }\n  &.ant-card-bordered {\n    border: 1px solid var(--border-color);\n  }\n`;\n\nexport const InputsWrapper = styled.div`\n  width: 30rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1.25rem;\n`;\n\nexport const CollapseWrapper = styled(Collapse)`\n  width: 40rem;\n`;\n","import styled from 'styled-components';\nimport { Collapse as AntdCollapse } from 'antd';\n\nexport const Collapse = styled(AntdCollapse)``;\n","import { CollapseProps, Collapse as AntdCollapse } from 'antd';\nimport * as S from './Collapse.styles';\n\nexport const { Panel } = AntdCollapse;\n\nexport const Collapse: React.FC<CollapseProps> = (props) => {\n  return <S.Collapse {...props} />;\n};\n","import { useState } from 'react';\nimport { Col } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '@app/components/common/buttons/Button/Button';\nimport { Modal, InfoModal, SuccessModal, WarningModal, ErrorModal } from '@app/components/common/Modal/Modal';\nimport { PageTitle } from '@app/components/common/PageTitle/PageTitle';\nimport * as S from '@app/pages/uiComponentsPages//UIComponentsPage.styles'; \n\nconst ModalsPage: React.FC = () => {\n  const { t } = useTranslation();\n  const [isBasicModalOpen, setIsBasicModalOpen] = useState<boolean>(false);\n  const [isSmallModalOpen, setIsSmallModalOpen] = useState<boolean>(false);\n  const [isMiddleModalOpen, setIsMiddleModalOpen] = useState<boolean>(false);\n  const [isLargeModalOpen, setIsLargeModalOpen] = useState<boolean>(false);\n  const [isFullscreenModalOpen, setIsFullscreenModalOpen] = useState<boolean>(false);\n\n  const success = () => {\n    SuccessModal({\n      title: t('modals.successTitle'),\n      content: t('modals.someContent'),\n    });\n  };\n\n  const info = () => {\n    InfoModal({\n      title: t('modals.infoTitle'),\n      content: t('modals.someContent'),\n    });\n  };\n\n  const warning = () => {\n    WarningModal({\n      title: t('modals.warningTitle'),\n      content: t('modals.someContent'),\n    });\n  };\n\n  const error = () => {\n    ErrorModal({\n      title: t('modals.errorTitle'),\n      content: t('modals.someContent'),\n    });\n  };\n\n  return (\n    <>\n      <PageTitle>{t('common.modal')}</PageTitle>\n      <Col>\n        <S.Card title={t('modals.basic')}>\n          <Button type=\"primary\" onClick={() => setIsBasicModalOpen(true)}>\n            {t('modals.open')}\n          </Button>\n          <Modal\n            title={t('modals.basic')}\n            open={isBasicModalOpen}\n            onOk={() => setIsBasicModalOpen(false)}\n            onCancel={() => setIsBasicModalOpen(false)}\n          >\n            <p>{t('modals.someContent')}</p>\n            <p>{t('modals.someContent')}</p>\n            <p>{t('modals.someContent')}</p>\n          </Modal>\n        </S.Card>\n        <S.Card title={t('modals.sizes')}>\n          <Button type=\"primary\" onClick={() => setIsSmallModalOpen(true)}>\n            {t('modals.small')}\n          </Button>\n          <Button type=\"primary\" onClick={() => setIsMiddleModalOpen(true)}>\n            {t('modals.middle')}\n          </Button>\n          <Button type=\"primary\" onClick={() => setIsLargeModalOpen(true)}>\n            {t('modals.large')}\n          </Button>\n          <Button type=\"primary\" onClick={() => setIsFullscreenModalOpen(true)}>\n            {t('modals.fullscreen')}\n          </Button>\n          <Modal\n            title={t('modals.smallTitle')}\n            centered\n            open={isSmallModalOpen}\n            onOk={() => setIsSmallModalOpen(false)}\n            onCancel={() => setIsSmallModalOpen(false)}\n            size=\"small\"\n          >\n            <p>{t('modals.someContent')}</p>\n            <p>{t('modals.someContent')}</p>\n            <p>{t('modals.someContent')}</p>\n          </Modal>\n          <Modal\n            title={t('modals.middleTitle')}\n            centered\n            open={isMiddleModalOpen}\n            onOk={() => setIsMiddleModalOpen(false)}\n            onCancel={() => setIsMiddleModalOpen(false)}\n            size=\"medium\"\n          >\n            <p>{t('modals.someContent')}</p>\n            <p>{t('modals.someContent')}</p>\n            <p>{t('modals.someContent')}</p>\n          </Modal>\n          <Modal\n            title={t('modals.largeTitle')}\n            centered\n            open={isLargeModalOpen}\n            onOk={() => setIsLargeModalOpen(false)}\n            onCancel={() => setIsLargeModalOpen(false)}\n            size=\"large\"\n          >\n            <p>{t('modals.someContent')}</p>\n            <p>{t('modals.someContent')}</p>\n            <p>{t('modals.someContent')}</p>\n          </Modal>\n          <Modal\n            title={t('modals.fullscreenTitle')}\n            centered\n            open={isFullscreenModalOpen}\n            onOk={() => setIsFullscreenModalOpen(false)}\n            onCancel={() => setIsFullscreenModalOpen(false)}\n            width={'100%'}\n          >\n            <p>{t('modals.someContent')}</p>\n            <p>{t('modals.someContent')}</p>\n            <p>{t('modals.someContent')}</p>\n          </Modal>\n        </S.Card>\n        <S.Card title={t('modals.infoModal')}>\n          <Button severity=\"success\" type=\"default\" onClick={success}>\n            {t('modals.success')}\n          </Button>\n          <Button severity=\"info\" type=\"default\" onClick={info}>\n            {t('modals.info')}\n          </Button>\n          <Button severity=\"warning\" type=\"default\" onClick={warning}>\n            {t('modals.warning')}\n          </Button>\n          <Button severity=\"error\" type=\"default\" onClick={error}>\n            {t('modals.error')}\n          </Button>\n        </S.Card>\n      </Col>\n    </>\n  );\n};\n\nexport default ModalsPage;\n"],"sourceRoot":""}
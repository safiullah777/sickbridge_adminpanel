{"version":3,"sources":["pages/uiComponentsPages/UIComponentsPage.styles.ts","components/common/Collapse/Collapse.styles.ts","components/common/Collapse/Collapse.tsx","constants/patterns.ts","components/common/inputs/SuffixInput/SuffixInput.styles.ts","components/common/inputs/SuffixInput/SuffixInput.tsx","components/common/inputs/ClipboardInput/ClipboardInput.tsx","components/common/inputs/OpenURLInput/OpenURLInput.tsx","pages/uiComponentsPages/forms/InputsPage.tsx"],"names":["Card","styled","CommonCard","InputsWrapper","div","CollapseWrapper","Collapse","AntdCollapse","Panel","props","passwordPattern","RegExp","websitePattern","Suffix","isOpen","SuffixInput","suffix","isOpenSuffix","Input","ClipboardInput","valueToCopy","t","useTranslation","handleCopy","useCallback","navigator","clipboard","writeText","then","notificationController","info","message","title","size","disabled","type","icon","CopyOutlined","onClick","OpenURLInput","href","target","isMatch","useMemo","test","Button","FileTextOutlined","InputsPage","useState","clipboardValue","setClipboardValue","newTabValue","setNewTabValue","selectBefore","Select","defaultValue","value","selectAfter","PageTitle","placeholder","prefix","UserOutlined","addonBefore","addonAfter","SettingOutlined","InfoCircleOutlined","SearchInput","allowClear","enterButton","AudioOutlined","InputPassword","iconRender","visible","EyeTwoTone","EyeInvisibleOutlined","rows","onChange","e"],"mappings":"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","file":"static/js/17.54c0de16.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Card as CommonCard } from 'components/common/Card/Card';\nimport { Collapse } from 'components/common/Collapse/Collapse';\n\nexport const Card = styled(CommonCard)`\n  width: 100%;\n  margin-bottom: 1.25rem;\n  .ant-card-head-title {\n    font-size: 1rem;\n  }\n  .ant-card-body {\n    display: flex;\n    flex\n    flex-wrap: wrap;\n    gap: 1.25rem;\n    align-items: center;\n  }\n  .ant-card-body:before {\n    display: none;\n  }\n  .ant-card-body:after {\n    display: none;\n  }\n  &.ant-card-bordered {\n    border: 1px solid var(--border-color);\n  }\n`;\n\nexport const InputsWrapper = styled.div`\n  width: 30rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1.25rem;\n`;\n\nexport const CollapseWrapper = styled(Collapse)`\n  width: 40rem;\n`;\n","import styled from 'styled-components';\nimport { Collapse as AntdCollapse } from 'antd';\n\nexport const Collapse = styled(AntdCollapse)``;\n","import { CollapseProps, Collapse as AntdCollapse } from 'antd';\nimport * as S from './Collapse.styles';\n\nexport const { Panel } = AntdCollapse;\n\nexport const Collapse: React.FC<CollapseProps> = (props) => {\n  return <S.Collapse {...props} />;\n};\n","export const passwordPattern = new RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/);\n\nexport const websitePattern = /[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?/gi;\n","import styled from 'styled-components';\n\ninterface SuffixProps {\n  isOpen: boolean;\n}\n\nexport const Suffix = styled.div<SuffixProps>`\n  transition: all 0.5s ease;\n  visibility: visible;\n  opacity: 1;\n\n  ${(props) => !props.isOpen && 'opacity: 0; visibility: hidden'};\n`;\n","import React from 'react';\nimport { Input, InputProps } from '../Input/Input';\nimport * as S from './SuffixInput.styles';\n\nexport interface SuffixInputProps extends InputProps {\n  suffix: React.ReactNode;\n  isOpenSuffix?: boolean;\n}\n\nexport const SuffixInput: React.FC<SuffixInputProps> = ({ suffix, isOpenSuffix = true, ...props }) => (\n  <Input suffix={<S.Suffix isOpen={isOpenSuffix}>{suffix}</S.Suffix>} {...props} />\n);\n","import React, { useCallback } from 'react';\nimport { Button, Tooltip } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { CopyOutlined } from '@ant-design/icons';\nimport { SuffixInput } from '../SuffixInput/SuffixInput';\nimport { InputProps } from '../Input/Input';\nimport { notificationController } from 'controllers/notificationController';\n\ninterface ClipboardInputProps extends InputProps {\n  valueToCopy?: string;\n}\n\nexport const ClipboardInput: React.FC<ClipboardInputProps> = ({ valueToCopy, ...props }) => {\n  const { t } = useTranslation();\n\n  const handleCopy = useCallback(\n    () =>\n      valueToCopy &&\n      navigator.clipboard.writeText(valueToCopy).then(() => {\n        notificationController.info({ message: t('common.copied') });\n      }),\n    [valueToCopy, t],\n  );\n\n  return (\n    <SuffixInput\n      suffix={\n        <Tooltip title={t('common.copy')}>\n          <Button size=\"small\" disabled={!valueToCopy} type=\"text\" icon={<CopyOutlined />} onClick={handleCopy} />\n        </Tooltip>\n      }\n      {...props}\n    />\n  );\n};\n","import React, { useMemo } from 'react';\nimport { Tooltip } from 'antd';\nimport { SuffixInput } from '../SuffixInput/SuffixInput';\nimport { useTranslation } from 'react-i18next';\nimport { FileTextOutlined } from '@ant-design/icons';\nimport { InputProps } from '../Input/Input';\nimport { websitePattern } from 'constants/patterns';\nimport { Button } from '@app/components/common/buttons/Button/Button';\n\ninterface OpenURLInputProps extends InputProps {\n  href?: string;\n  target?: string;\n}\n\nexport const OpenURLInput: React.FC<OpenURLInputProps> = ({ href, target = '_blank', ...props }) => {\n  const { t } = useTranslation();\n\n  const isMatch = useMemo(() => new RegExp(websitePattern).test(href || ' '), [href]);\n\n  return (\n    <SuffixInput\n      suffix={\n        <Tooltip title={t('common.openInNewTab')}>\n          <Button\n            size=\"small\"\n            href={href}\n            target={target}\n            disabled={!isMatch}\n            type=\"text\"\n            icon={<FileTextOutlined />}\n          />\n        </Tooltip>\n      }\n      {...props}\n    />\n  );\n};\n","import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  UserOutlined,\n  AudioOutlined,\n  EyeTwoTone,\n  EyeInvisibleOutlined,\n  SettingOutlined,\n  InfoCircleOutlined,\n} from '@ant-design/icons';\nimport { Col, Cascader, Tooltip } from 'antd';\nimport { Input, TextArea } from '@app/components/common/inputs/Input/Input';\nimport { PageTitle } from '@app/components/common/PageTitle/PageTitle';\nimport { Select, Option } from '@app/components/common/selects/Select/Select';\nimport { SearchInput } from '@app/components/common/inputs/SearchInput/SearchInput';\nimport { InputPassword } from '@app/components/common/inputs/InputPassword/InputPassword';\nimport { ClipboardInput } from '@app/components/common/inputs/ClipboardInput/ClipboardInput';\nimport { OpenURLInput } from '@app/components/common/inputs/OpenURLInput/OpenURLInput';\nimport * as S from '@app/pages/uiComponentsPages//UIComponentsPage.styles';\n\nconst InputsPage: React.FC = () => {\n  const { t } = useTranslation();\n  const [clipboardValue, setClipboardValue] = useState('@altence_team');\n  const [newTabValue, setNewTabValue] = useState('https://altence.com');\n\n  const selectBefore = (\n    <Select defaultValue=\"http://\">\n      <Option value=\"http://\">http://</Option>\n      <Option value=\"https://\">https://</Option>\n    </Select>\n  );\n\n  const selectAfter = (\n    <Select defaultValue=\".com\">\n      <Option value=\".com\">.com</Option>\n      <Option value=\".jp\">.jp</Option>\n      <Option value=\".cn\">.cn</Option>\n      <Option value=\".org\">.org</Option>\n    </Select>\n  );\n\n  return (\n    <>\n      <PageTitle>{t('common.input')}</PageTitle>\n      <Col>\n        <S.Card title={t('inputs.basic')}>\n          <S.InputsWrapper>\n            <Input placeholder={t('inputs.basic')} />\n          </S.InputsWrapper>\n        </S.Card>\n        <S.Card title={t('inputs.sizes')}>\n          <S.InputsWrapper>\n            <Input size=\"small\" placeholder={t('inputs.small')} prefix={<UserOutlined />} />\n            <Input placeholder={t('inputs.default')} prefix={<UserOutlined />} />\n            <Input size=\"large\" placeholder={t('inputs.large')} prefix={<UserOutlined />} />\n          </S.InputsWrapper>\n        </S.Card>\n        <S.Card title={t('inputs.prePost')}>\n          <S.InputsWrapper>\n            <Input addonBefore=\"http://\" addonAfter=\".com\" defaultValue=\"mysite\" />\n            <Input addonBefore={selectBefore} addonAfter={selectAfter} defaultValue=\"mysite\" />\n            <Input addonAfter={<SettingOutlined />} defaultValue=\"mysite\" />\n            <Input addonBefore=\"http://\" suffix=\".com\" defaultValue=\"mysite\" />\n            <Input addonBefore={<Cascader placeholder=\"cascader\" />} defaultValue=\"mysite\" />\n          </S.InputsWrapper>\n        </S.Card>\n        <S.Card title={t('inputs.prefixSuffix')}>\n          <S.InputsWrapper>\n            <Input\n              placeholder={t('inputs.enterName')}\n              prefix={<UserOutlined />}\n              suffix={\n                <Tooltip title={t('inputs.extra')}>\n                  <InfoCircleOutlined />\n                </Tooltip>\n              }\n            />\n            <Input prefix=\"￥\" suffix=\"RMB\" />\n            <Input prefix=\"￥\" suffix=\"RMB\" disabled />\n          </S.InputsWrapper>\n        </S.Card>\n        <S.Card title={t('inputs.search')}>\n          <S.InputsWrapper>\n            <SearchInput placeholder={t('inputs.searchText')} allowClear />\n            <SearchInput addonBefore=\"https://\" placeholder={t('inputs.searchText')} allowClear />\n            <SearchInput\n              placeholder={t('inputs.searchText')}\n              enterButton=\"Search\"\n              size=\"large\"\n              suffix={<AudioOutlined />}\n            />\n          </S.InputsWrapper>\n        </S.Card>\n        <S.Card title={t('inputs.password')}>\n          <S.InputsWrapper>\n            <InputPassword\n              placeholder={t('inputs.passwordText')}\n              iconRender={(visible) => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\n            />\n          </S.InputsWrapper>\n        </S.Card>\n        <S.Card title={t('inputs.textarea')}>\n          <S.InputsWrapper>\n            <TextArea rows={4} />\n          </S.InputsWrapper>\n        </S.Card>\n        <S.Card title={t('inputs.func')}>\n          <S.InputsWrapper>\n            <ClipboardInput\n              value={clipboardValue}\n              placeholder={t('inputs.clipboard')}\n              valueToCopy={clipboardValue}\n              onChange={(e) => setClipboardValue(e.target.value)}\n            />\n            <OpenURLInput\n              value={newTabValue}\n              placeholder={t('inputs.openURL')}\n              href={newTabValue}\n              onChange={(e) => setNewTabValue(e.target.value)}\n            />\n          </S.InputsWrapper>\n        </S.Card>\n      </Col>\n    </>\n  );\n};\n\nexport default InputsPage;\n"],"sourceRoot":""}
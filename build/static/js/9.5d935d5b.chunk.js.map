{"version":3,"sources":["components/common/forms/BaseButtonsForm/BaseButtonsForm.tsx","components/common/forms/components/BaseButtonsGroup/BaseButtonsGroup.tsx","components/profile/profileCard/profileFormNav/nav/PersonalInfo/PhoneItem/PhoneItem.tsx","components/profile/profileCard/profileFormNav/nav/PersonalInfo/EmailItem/EmailItem.tsx","constants/patterns.ts","components/profile/profileCard/profileFormNav/nav/SecuritySettings/passwordForm/ConfirmPasswordItem/ConfirmPasswordItem.tsx","components/profile/profileCard/profileFormNav/nav/SecuritySettings/passwordForm/CurrentPasswordItem/CurrentPasswordItem.tsx","components/profile/profileCard/profileFormNav/nav/SecuritySettings/passwordForm/NewPasswordItem/NewPasswordItem.tsx","components/profile/profileCard/profileFormNav/nav/SecuritySettings/passwordForm/PasswordForm/PasswordForm.styles.ts","components/profile/profileCard/profileFormNav/nav/SecuritySettings/passwordForm/PasswordForm/PasswordForm.tsx","components/profile/profileCard/profileFormNav/nav/SecuritySettings/twoFactorAuth/TwoFactorOptions/TwoFactorOptions.styles.ts","components/profile/profileCard/profileFormNav/nav/SecuritySettings/twoFactorAuth/TwoFactorOptions/TwoFactorOptions.tsx","components/profile/profileCard/profileFormNav/nav/SecuritySettings/twoFactorAuth/TwoFactorSwitch/TwoFactorSwitch.tsx","components/profile/profileCard/profileFormNav/nav/SecuritySettings/twoFactorAuth/TwoFactorAuth.styles.ts","components/profile/profileCard/profileFormNav/nav/SecuritySettings/twoFactorAuth/TwoFactorAuth.tsx","components/profile/profileCard/profileFormNav/nav/SecuritySettings/SecuritySettings.tsx","pages/SecuritySettingsPage.tsx"],"names":["BaseButtonsForm","form","isFieldsChanged","setFieldsChanged","footer","loading","children","props","BaseForm","useForm","formDefault","currentForm","onCancel","resetFields","Title","BaseFormTitle","Item","BaseFormItem","List","BaseFormList","Provider","BaseButtonsGroup","className","t","useTranslation","gutter","wrap","span","block","type","onClick","htmlType","PhoneItem","required","verified","name","label","isDisable","EmailItem","$isSuccess","$successText","rules","message","disabled","passwordPattern","RegExp","websitePattern","ConfirmItemPassword","dependencies","getFieldValue","validator","_","value","Promise","reject","Error","resolve","InputPassword","CurrentPasswordItem","NewPasswordItem","pattern","Btn","styled","Button","media","md","xl","PasswordForm","useState","isLoading","setLoading","requiredMark","onFieldsChange","onFinish","values","setTimeout","notificationController","success","console","log","xs","RadioBtn","Radio","$isActive","TwoFactorOptions","selectedOption","setSelectedOption","user","useAppSelector","state","useMemo","isPhoneActive","isEmailActive","onClickInput","useCallback","mode","useEffect","email","phone","onChange","e","target","TwoFactorSwitch","isEnabled","setEnabled","justify","align","checked","AuthModal","Modal","TwoFactorAuth","isNeedToShowVerifyBtn","number","Boolean","isClickedVerify","setClickedVerify","dispatch","useAppDispatch","onVerify","newUser","setUser","initialValues","destroyOnClose","open","closable","SecurityCodeForm","onBack","SecuritySettings","Card","SecuritySettingsPage","PageTitle"],"mappings":"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","file":"static/js/9.5d935d5b.chunk.js","sourcesContent":["import React from 'react';\nimport { BaseForm, BaseFormInterface, BaseFormProps } from '@app/components/common/forms//BaseForm/BaseForm';\nimport { BaseButtonsGroup } from '@app/components/common/forms/components/BaseButtonsGroup/BaseButtonsGroup';\nimport { BaseFormTitle } from '@app/components/common/forms/components/BaseFormTitle/BaseFormTitle';\nimport { BaseFormItem } from '@app/components/common/forms/components/BaseFormItem/BaseFormItem';\nimport { BaseFormList } from '@app/components/common/forms/components/BaseFormList/BaseFormList';\n\nexport interface BaseButtonsFormProps extends BaseFormProps {\n  isFieldsChanged: boolean;\n  setFieldsChanged?: (state: boolean) => void;\n  footer?: React.ReactElement;\n  loading?: boolean;\n}\n\nexport const BaseButtonsForm: BaseFormInterface<BaseButtonsFormProps> = ({\n  form,\n  isFieldsChanged,\n  setFieldsChanged,\n  footer,\n  loading = false,\n  children,\n  ...props\n}) => {\n  const [formDefault] = BaseForm.useForm();\n  const currentForm = form || formDefault;\n\n  const onCancel = () => {\n    currentForm?.resetFields();\n    setFieldsChanged && setFieldsChanged(false);\n  };\n\n  return (\n    <BaseForm form={currentForm} {...props}>\n      {children}\n      {isFieldsChanged && (footer || <BaseButtonsGroup loading={loading} onCancel={onCancel} />)}\n    </BaseForm>\n  );\n};\n\nBaseButtonsForm.Title = BaseFormTitle;\nBaseButtonsForm.Item = BaseFormItem;\nBaseButtonsForm.List = BaseFormList;\nBaseButtonsForm.useForm = BaseForm.useForm;\nBaseButtonsForm.Provider = BaseForm.Provider;\n","import React, { ComponentProps } from 'react';\nimport { Col, Row } from 'antd';\nimport { Button } from '@app/components/common/buttons/Button/Button';\nimport { useTranslation } from 'react-i18next';\n\ninterface BaseButtonsGroupProps extends ComponentProps<typeof Button> {\n  className?: string;\n  onCancel: () => void;\n  loading?: boolean;\n}\n\nexport const BaseButtonsGroup: React.FC<BaseButtonsGroupProps> = ({ className, onCancel, loading, ...props }) => {\n  const { t } = useTranslation();\n\n  return (\n    <Row className={className} gutter={[10, 10]} wrap={false}>\n      <Col span={12}>\n        <Button block type=\"ghost\" onClick={onCancel} {...props}>\n          {t('common.cancel')}\n        </Button>\n      </Col>\n      <Col span={12}>\n        <Button block type=\"primary\" loading={loading} htmlType=\"submit\" {...props}>\n          {t('common.save')}\n        </Button>\n      </Col>\n    </Row>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { isValidPhoneNumber } from 'react-phone-number-input';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport * as S from './PhoneItem.styles';\nimport { Input } from '@app/components/common/inputs/Input/Input';\n\ninterface PhoneItemsProps {\n  required?: boolean;\n  onClick?: () => void;\n  verified?: boolean;\n}\n\nexport const PhoneItem: React.FC<PhoneItemsProps> = ({ required, onClick, verified }) => {\n  const { t } = useTranslation();\n\n  return (\n    <BaseButtonsForm.Item name=\"phoneNo\" label={t('Phone')}>\n      <Input isDisable={true} />\n    </BaseButtonsForm.Item>\n  );\n};\n","import React from 'react';\nimport { FormItemProps } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { Input } from '@app/components/common/inputs/Input/Input';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\n\ninterface EmailItemProps extends FormItemProps {\n  verified?: boolean;\n  onClick?: () => void;\n}\n\nexport const EmailItem: React.FC<EmailItemProps> = ({ required, onClick, verified, ...props }) => {\n  const { t } = useTranslation();\n\n  return (\n    <BaseButtonsForm.Item\n      name=\"email\"\n      $isSuccess={verified}\n      $successText={t('profile.nav.personalInfo.verified')}\n      label={t('common.email')}\n      rules={[\n        { required, message: t('common.requiredField') },\n        {\n          type: 'email',\n          message: t('common.notValidEmail'),\n        },\n      ]}\n      {...props}\n    >\n      <Input disabled={verified} onClick={onClick} />\n    </BaseButtonsForm.Item>\n  );\n};\n","export const passwordPattern = new RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/);\n\nexport const websitePattern = /[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?/gi;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { InputPassword } from '@app/components/common/inputs/InputPassword/InputPassword';\n\nexport const ConfirmItemPassword: React.FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <BaseButtonsForm.Item\n      name=\"confirmPassword\"\n      label={t('profile.nav.securitySettings.confirmPassword')}\n      dependencies={['newPassword']}\n      rules={[\n        {\n          required: true,\n          message: t('profile.nav.securitySettings.requiredPassword'),\n        },\n        ({ getFieldValue }) => ({\n          validator(_, value) {\n            if (!value || getFieldValue('newPassword') === value) {\n              return Promise.resolve();\n            }\n            return Promise.reject(new Error(t('profile.nav.securitySettings.dontMatchPassword')));\n          },\n        }),\n      ]}\n    >\n      <InputPassword />\n    </BaseButtonsForm.Item>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { InputPassword } from '@app/components/common/inputs/InputPassword/InputPassword';\n\nexport const CurrentPasswordItem: React.FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <BaseButtonsForm.Item\n      name=\"password\"\n      label={t('profile.nav.securitySettings.currentPassword')}\n      rules={[\n        {\n          required: true,\n          message: t('profile.nav.securitySettings.requiredPassword'),\n        },\n      ]}\n    >\n      <InputPassword />\n    </BaseButtonsForm.Item>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { InputPassword } from '@app/components/common/inputs/InputPassword/InputPassword';\nimport { passwordPattern } from '@app/constants/patterns';\n\nexport const NewPasswordItem: React.FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <BaseButtonsForm.Item\n      name=\"newPassword\"\n      label={t('profile.nav.securitySettings.newPassword')}\n      dependencies={['password']}\n      rules={[\n        {\n          required: true,\n          message: t('profile.nav.securitySettings.requiredPassword'),\n        },\n        {\n          pattern: passwordPattern,\n          message: t('profile.nav.securitySettings.notValidPassword'),\n        },\n        ({ getFieldValue }) => ({\n          validator(_, value) {\n            if (!value || getFieldValue('password') !== value) {\n              return Promise.resolve();\n            }\n            return Promise.reject(new Error(t('profile.nav.securitySettings.samePassword')));\n          },\n        }),\n      ]}\n    >\n      <InputPassword />\n    </BaseButtonsForm.Item>\n  );\n};\n","import { Button } from '@app/components/common/buttons/Button/Button';\nimport { media } from '@app/styles/themes/constants';\nimport styled from 'styled-components';\n\nexport const Btn = styled(Button)`\n  margin: 0.5rem 0 1.5rem 0;\n  width: 100%;\n\n  @media only screen and ${media.md} {\n    max-width: 10rem;\n  }\n\n  @media only screen and ${media.xl} {\n    max-width: unset;\n  }\n`;\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Col, Row } from 'antd';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { ConfirmItemPassword } from '@app/components/profile/profileCard/profileFormNav/nav/SecuritySettings/passwordForm/ConfirmPasswordItem/ConfirmPasswordItem';\nimport { CurrentPasswordItem } from '@app/components/profile/profileCard/profileFormNav/nav/SecuritySettings/passwordForm/CurrentPasswordItem/CurrentPasswordItem';\nimport { NewPasswordItem } from '@app/components/profile/profileCard/profileFormNav/nav/SecuritySettings/passwordForm/NewPasswordItem/NewPasswordItem';\nimport { notificationController } from '@app/controllers/notificationController';\nimport * as S from './PasswordForm.styles';\n\nexport const PasswordForm: React.FC = () => {\n  const [isFieldsChanged, setFieldsChanged] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const { t } = useTranslation();\n\n  const onFinish = (values: []) => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      setFieldsChanged(false);\n      notificationController.success({ message: t('common.success') });\n      console.log(values);\n    }, 1000);\n  };\n\n  return (\n    <BaseButtonsForm\n      name=\"newPassword\"\n      requiredMark=\"optional\"\n      isFieldsChanged={isFieldsChanged}\n      onFieldsChange={() => setFieldsChanged(true)}\n      footer={\n        <S.Btn loading={isLoading} type=\"primary\" htmlType=\"submit\">\n          {t('common.confirm')}\n        </S.Btn>\n      }\n      onFinish={onFinish}\n    >\n      <Row gutter={{ md: 15, xl: 30 }}>\n        <Col span={24}>\n          <BaseButtonsForm.Item>\n            <BaseButtonsForm.Title>{t('profile.nav.securitySettings.changePassword')}</BaseButtonsForm.Title>\n          </BaseButtonsForm.Item>\n        </Col>\n\n        <Col xs={24} md={12} xl={24}>\n          <CurrentPasswordItem />\n        </Col>\n\n        <Col xs={24} md={12} xl={24}>\n          <NewPasswordItem />\n        </Col>\n\n        <Col xs={24} md={12} xl={24}>\n          <ConfirmItemPassword />\n        </Col>\n      </Row>\n    </BaseButtonsForm>\n  );\n};\n","import styled from 'styled-components';\nimport { Radio } from '@app/components/common/Radio/Radio';\n\ninterface RadioBtnProps {\n  $isActive: boolean;\n}\n\nexport const RadioBtn = styled(Radio)<RadioBtnProps>`\n  margin-right: 0;\n  width: 100%;\n  transition: all 0.5s ease;\n\n  ${(props) => !props.$isActive && 'opacity: 0.5'};\n\n  & > span:last-of-type {\n    flex-grow: 1;\n  }\n`;\n","import React, { useCallback, useEffect, useMemo } from 'react';\nimport { RadioGroup } from '@app/components/common/Radio/Radio';\nimport { EmailItem } from '@app/components/profile/profileCard/profileFormNav/nav/PersonalInfo/EmailItem/EmailItem';\nimport { PhoneItem } from '@app/components/profile/profileCard/profileFormNav/nav/PersonalInfo/PhoneItem/PhoneItem';\nimport { useAppSelector } from '@app/hooks/reduxHooks';\nimport { TwoFactorAuthOption } from '@app/interfaces/interfaces';\nimport { TwoFactorAuthOptionState } from '../TwoFactorAuth';\nimport * as S from './TwoFactorOptions.styles';\n\ninterface TwoFactorOptionsProps {\n  selectedOption: TwoFactorAuthOptionState;\n  setSelectedOption: (state: TwoFactorAuthOptionState) => void;\n}\n\nexport const TwoFactorOptions: React.FC<TwoFactorOptionsProps> = ({ selectedOption, setSelectedOption }) => {\n  const user = useAppSelector((state) => state.user.user);\n\n  const { isEmailActive, isPhoneActive } = useMemo(\n    () => ({\n      isPhoneActive: selectedOption === 'phone',\n      isEmailActive: selectedOption === 'email',\n    }),\n    [selectedOption],\n  );\n\n  const onClickInput = useCallback(\n    (mode: TwoFactorAuthOption) => () => {\n      setSelectedOption(mode);\n    },\n    [setSelectedOption],\n  );\n\n  useEffect(() => {\n    if (user?.email.verified && user?.phone.verified) {\n      setSelectedOption(null);\n    }\n  }, [setSelectedOption, user?.email.verified, user?.phone.verified]);\n\n  return (\n    <>\n      <RadioGroup value={selectedOption} onChange={(e) => setSelectedOption(e.target.value)}>\n        <S.RadioBtn value=\"phone\" $isActive={isPhoneActive} disabled={user?.phone.verified}>\n          <PhoneItem required={isPhoneActive} onClick={onClickInput('phone')} verified={user?.phone.verified} />\n        </S.RadioBtn>\n        <S.RadioBtn value=\"email\" $isActive={isEmailActive} disabled={user?.email.verified}>\n          <EmailItem required={isEmailActive} onClick={onClickInput('email')} verified={user?.email.verified} />\n        </S.RadioBtn>\n      </RadioGroup>\n    </>\n  );\n};\n","import React from 'react';\nimport { Col, Row, Switch } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\n\ninterface TwoFactorSwitchProps {\n  isEnabled: boolean;\n  setEnabled: (state: boolean) => void;\n}\n\nexport const TwoFactorSwitch: React.FC<TwoFactorSwitchProps> = ({ isEnabled, setEnabled }) => {\n  const { t } = useTranslation();\n\n  return (\n    <BaseButtonsForm.Item>\n      <Row gutter={[10, 10]} justify=\"space-between\" align=\"middle\">\n        <Col span={20}>\n          <BaseButtonsForm.Title>{t('profile.nav.securitySettings.twoFactorAuth')}</BaseButtonsForm.Title>\n        </Col>\n        <Col span={4}>\n          <Row justify=\"end\">\n            <Col>\n              <BaseButtonsForm.Item name=\"2fa\">\n                <Switch checked={isEnabled} onChange={setEnabled} />\n              </BaseButtonsForm.Item>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </BaseButtonsForm.Item>\n  );\n};\n","import styled from 'styled-components';\nimport { Modal } from '@app/components/common/Modal/Modal';\n\nexport const AuthModal = styled(Modal)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  .ant-modal-body {\n    padding: 0;\n  }\n`;\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { Col, Row } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { TwoFactorOptions } from '@app/components/profile/profileCard/profileFormNav/nav/SecuritySettings/twoFactorAuth/TwoFactorOptions/TwoFactorOptions';\nimport { TwoFactorSwitch } from '@app/components/profile/profileCard/profileFormNav/nav/SecuritySettings/twoFactorAuth/TwoFactorSwitch/TwoFactorSwitch';\nimport { Button } from '@app/components/common/buttons/Button/Button';\nimport { SecurityCodeForm } from '@app/components/auth/SecurityCodeForm/SecurityCodeForm';\nimport { notificationController } from '@app/controllers/notificationController';\nimport { setUser } from '@app/store/slices/userSlice';\nimport { useAppDispatch, useAppSelector } from '@app/hooks/reduxHooks';\nimport { TwoFactorAuthOption } from '@app/interfaces/interfaces';\nimport * as S from './TwoFactorAuth.styles';\n\nexport interface CurrentOption {\n  value: 'phone' | 'email';\n  isVerified: boolean;\n}\n\nexport type TwoFactorAuthOptionState = TwoFactorAuthOption | null;\n\nexport const TwoFactorAuth: React.FC = () => {\n  const user = useAppSelector((state) => state.user.user);\n\n  const isNeedToShowVerifyBtn = useMemo(\n    () => (user?.email.name && !user?.email.verified) || (user?.phone.number && !user?.phone.verified),\n    [user],\n  );\n\n  const [isFieldsChanged, setFieldsChanged] = useState(Boolean(isNeedToShowVerifyBtn));\n  const [isLoading, setLoading] = useState(false);\n\n  const [isEnabled, setEnabled] = useState(Boolean(user?.email.verified || user?.phone.verified));\n  const [selectedOption, setSelectedOption] = useState<TwoFactorAuthOptionState>('email');\n  const [isClickedVerify, setClickedVerify] = useState(false);\n\n  const dispatch = useAppDispatch();\n\n  const { t } = useTranslation();\n\n  const onClickVerify = () => {\n    setClickedVerify(true);\n  };\n\n  const onVerify = useCallback(() => {\n    if (user && selectedOption) {\n      setLoading(false);\n      setFieldsChanged(false);\n      setClickedVerify(false);\n      notificationController.success({ message: t('common.success') });\n\n      const newUser = { ...user, [selectedOption]: { ...user[selectedOption], verified: true } };\n\n      dispatch(setUser(newUser));\n    }\n  }, [dispatch, selectedOption, t, user]);\n\n  return (\n    <>\n      <BaseButtonsForm\n        name=\"twoFactorAuth\"\n        requiredMark=\"optional\"\n        isFieldsChanged={isFieldsChanged}\n        onFieldsChange={() => setFieldsChanged(true)}\n        initialValues={{\n          email: user?.email.name,\n          phone: user?.phone.number,\n        }}\n        footer={\n          (isEnabled && (\n            <Button type=\"link\" loading={isLoading} htmlType=\"submit\">\n              {t('profile.nav.securitySettings.verify')}\n            </Button>\n          )) || <span />\n        }\n        onFinish={onClickVerify}\n      >\n        <Row>\n          <Col span={24}>\n            <TwoFactorSwitch isEnabled={isEnabled} setEnabled={setEnabled} />\n          </Col>\n\n          {isEnabled && (\n            <Col span={24}>\n              <TwoFactorOptions selectedOption={selectedOption} setSelectedOption={setSelectedOption} />\n            </Col>\n          )}\n        </Row>\n      </BaseButtonsForm>\n      <S.AuthModal\n        destroyOnClose\n        open={isClickedVerify}\n        footer={false}\n        closable={false}\n        onCancel={() => setClickedVerify(false)}\n      >\n        <SecurityCodeForm onBack={() => setClickedVerify(false)} onFinish={onVerify} />\n      </S.AuthModal>\n    </>\n  );\n};\n","import React from 'react';\nimport { Col, Row } from 'antd';\nimport { Card } from 'components/common/Card/Card';\nimport { PasswordForm } from './passwordForm/PasswordForm/PasswordForm';\nimport { TwoFactorAuth } from './twoFactorAuth/TwoFactorAuth';\n\nexport const SecuritySettings: React.FC = () => (\n  <Card>\n    <Row gutter={[30, 0]}>\n      <Col xs={24} xl={10}>\n        <PasswordForm />\n      </Col>\n\n      <Col xs={24} xl={14}>\n        <TwoFactorAuth />\n      </Col>\n    </Row>\n  </Card>\n);\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { SecuritySettings } from '@app/components/profile/profileCard/profileFormNav/nav/SecuritySettings/SecuritySettings';\nimport { PageTitle } from '@app/components/common/PageTitle/PageTitle';\n\nconst SecuritySettingsPage: React.FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <PageTitle>{t('profile.nav.securitySettings.title')}</PageTitle>\n      <SecuritySettings />\n    </>\n  );\n};\n\nexport default SecuritySettingsPage;\n"],"sourceRoot":""}